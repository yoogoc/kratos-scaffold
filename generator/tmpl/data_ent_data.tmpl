{{- /*gotype: github.com/yoogoc/kratos-scaffold/generator.Data*/ -}}
{{$modelName := .Name |ToLowerCamel}}
package data

import (
	"context"
	"time"
	"github.com/go-kratos/kratos/v2/log"
	"{{.CurrentPkgPath}}/biz"
	"{{.CurrentPkgPath}}/data/ent"
)

var _ biz.{{.Name | ToCamel}}Repo = (*{{$modelName}}Repo)(nil)

type {{$modelName}}Repo struct {
	data *Data
	log  *log.Helper
}

func New{{.Name | ToCamel}}Repo(data *Data, logger log.Logger) biz.{{.Name | ToCamel}}Repo {
	return &{{$modelName}}Repo{
		data: data,
		log:  log.NewHelper(log.With(logger, "module", "data/{{$modelName}}")),
	}
}

func (r {{$modelName}}Repo) Create(ctx context.Context, {{$modelName}} *biz.{{.Name | ToCamel}}) (*biz.{{.Name | ToCamel}}, error) {
	client := r.data.EntClient(ctx)
	row, err := client.{{.Name | ToCamel}}.Create().
		{{- range $i, $f := .CreateFields }}
		{{- if $f.IsNillable }}
		SetNillable{{ $f.Name | ToEntName }}({{$modelName}}.{{ $f.Name | ToCamel }}{{- if $f.FieldType.IsJson }}.AsMap(){{- end }}).
		{{- else }}
		Set{{ $f.Name | ToEntName }}({{$modelName}}.{{ $f.Name | ToCamel }}{{- if $f.FieldType.IsJson }}.AsMap(){{- end }}).
		{{- end }}
		{{- end }}
		Save(ctx)
	if err != nil {
		return nil, err
	}
	return {{$modelName}}Ent2Biz(row), nil
}

func (r {{$modelName}}Repo) Update(ctx context.Context, {{$modelName}} *biz.{{.Name | ToCamel}}) (*biz.{{.Name | ToCamel}}, error) {
	client := r.data.EntClient(ctx)
 	{{$fields := .UpdateFields}}
	exec := client.{{.Name | ToCamel}}.UpdateOneID({{$modelName}}.Id).
		{{- range $i, $f := $fields }}
		{{$isLast := last $i $fields}}
		{{- if $f.IsNillable }}
		SetNillable{{ $f.Name | ToEntName }}({{$modelName}}.{{ $f.Name | ToCamel }}{{- if $f.FieldType.IsJson }}.AsMap(){{- end }}){{- if not $isLast}}.{{- end }}
		{{- else }}
		Set{{ $f.Name | ToEntName }}({{$modelName}}.{{ $f.Name | ToCamel }}{{- if $f.FieldType.IsJson }}.AsMap(){{- end }}){{- if not $isLast}}.{{- end }}
		{{- end }}
		{{- end }}

	{{- range $i, $f := .UpdateFields }}
	{{- if $f.IsNillable }}
	if  {{$modelName}}.{{ $f.Name | ToCamel }} == nil {
		exec.Clear{{ $f.Name | ToEntName }}()
	}
	{{- end }}
	{{- end }}

	row, err := exec.Save(ctx)
	if err != nil {
		return nil, err
	}
	return {{$modelName}}Ent2Biz(row), nil
}

func (r {{$modelName}}Repo) DestroyBy(ctx context.Context, param *biz.{{.Name | ToCamel}}Param) (int, error) {
	client := r.data.EntClient(ctx)
	{{- if .SoftDelete }}
	return client.{{.Name | ToCamel}}.Update().Where({{$modelName}}Param2Predicates(param)...).SetDeletedAt(time.Now()).Save(ctx)
	{{- else }}
	return client.{{.Name | ToCamel}}.Delete().Where({{$modelName}}Param2Predicates(param)...).Exec(ctx)
	{{- end }}
}

func (r {{$modelName}}Repo) List(ctx context.Context, param *biz.{{.Name | ToCamel}}Param, page, size int) ([]*biz.{{.Name | ToCamel}}, int, error) {
	client := r.data.EntClient(ctx)
	query := client.{{.Name | ToCamel}}.Query().Where({{$modelName}}Param2Predicates(param)...)
	count, err := query.Clone().Count(ctx)
	if err != nil {
		return nil, 0, err
	}
	if size > 0 {
		query = query.Limit(size).Offset((page - 1) * size)
	}
	rows, err := query.All(ctx)
	if err != nil {
		return nil, 0, err
	}
	return bulk{{.Name | ToCamel}}Ent2Biz(rows), count, nil
}

func (r {{$modelName}}Repo) FindBy(ctx context.Context, param *biz.{{.Name | ToCamel}}Param) (*biz.{{.Name | ToCamel}}, error) {
	client := r.data.EntClient(ctx)
	rows, err := client.{{.Name | ToCamel}}.Query().Where({{$modelName}}Param2Predicates(param)...).First(ctx)
	if err != nil {
		return nil, err
	}
	return {{$modelName}}Ent2Biz(rows), nil
}
