{{- /*gotype: github.com/yoogoc/kratos-scaffold/generator.Biz */ -}}
package biz

import (
	"context"
	"github.com/go-kratos/kratos/v2/log"
	{{- range $i, $s := .MaybeGoPackages }}
	"{{ $s }}"
	{{- end }}
)

{{- $http := .Http }}

type {{.Name}} struct {
	{{- range $i, $f := .Fields }}
	{{- if $f.IsArray }}
	{{ $f.Name | ToCamel }} []{{ $http | $f.FieldType.StringByType }}
	{{- else }}
	{{ $f.Name | ToCamel }}{{" "}}{{- if $f.IsNillable }}*{{- end }}{{ $http | $f.FieldType.StringByType }}
	{{- end }}
	{{- end }}
}

type {{.Name}}Param struct {
	{{- $strToPreMap := .StrToPreMap}}
	{{- range $i, $f := .Fields.ParamFields }}
	{{ $f.Name | ToCamel }} {{ if eq $f.Type $strToPreMap.in }}[]{{ $f.FieldType.String }}{{ else }}{{ $http | $f.FieldType.StringParamByType }}{{- end }}
	{{- end }}
}

type {{.Name}}Repo interface {
	Create(ctx context.Context, {{.Name | ToLower}} *{{.Name}}) (*{{.Name}}, error)
	Update(ctx context.Context, {{.Name | ToLower}} *{{.Name}}) (*{{.Name}}, error)
	DestroyBy(ctx context.Context, param *{{.Name}}Param) (int, error)
	List(ctx context.Context, param *{{.Name}}Param, page, size int) ([]*{{.Name}}, int, error)
	FindBy(ctx context.Context, param *{{.Name}}Param) (*{{.Name}}, error)
}

type {{.Name}}Usecase struct {
	repo {{.Name}}Repo
	log  *log.Helper
}

func New{{.Name}}Usecase(repo {{.Name}}Repo, logger log.Logger) *{{.Name}}Usecase {
	return &{{.Name}}Usecase{
		repo: repo,
		log:  log.NewHelper(log.With(logger, "module", "usecase/{{.Name | ToLower}}")),
	}
}

func (uc *{{.Name}}Usecase) Create{{.Name}}(ctx context.Context, {{.Name | ToLower}} *{{.Name}}) (*{{.Name}}, error) {
	return uc.repo.Create(ctx, {{.Name | ToLower}})
}

func (uc *{{.Name}}Usecase) Update{{.Name}}(ctx context.Context, {{.Name | ToLower}} *{{.Name}}) (*{{.Name}}, error) {
	return uc.repo.Update(ctx, {{.Name | ToLower}})
}

func (uc *{{.Name}}Usecase) Destroy{{.Name}}By(ctx context.Context, param *{{.Name}}Param) (int, error) {
	return uc.repo.DestroyBy(ctx, param)
}

func (uc *{{.Name}}Usecase) List{{.Name}}(ctx context.Context, param *{{.Name}}Param, page, size int) ([]*{{.Name}}, int, error) {
	return uc.repo.List(ctx, param, page, size)
}

func (uc *{{.Name}}Usecase) Find{{.Name}}By(ctx context.Context, param *{{.Name}}Param) (*{{.Name}}, error) {
	return uc.repo.FindBy(ctx, param)
}
