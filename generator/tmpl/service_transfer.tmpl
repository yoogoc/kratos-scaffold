{{- /*gotype: github.com/yoogoc/kratos-scaffold/generator.Service*/ -}}
package service

import (
	"fmt"
	"{{.CurrentPkgPath}}/biz"
	{{- range $i, $s := .MaybeGoPackages }}
	"{{ $s }}"
	{{- end }}
	v1 "{{.ApiPath}}"
)

func create{{.Name}}Req2Biz(req *v1.Create{{.Name}}Request) *biz.{{.Name}} {
	{{- range $i, $f := .CreateFields }}
		{{- $reqf := printf "req.%s" ($f.Name | ToCamel) }}
		{{- if $f.FieldType.IsTime }}
			{{ $f.Name }}, _ := time.Parse(time.DateTime, {{ $reqf }})
		{{- end }}
	{{- end }}
	return &biz.{{.Name}}{
		{{- range $i, $f := .CreateFields }}
			{{- $reqf := printf "req.%s" ($f.Name | ToCamel) }}
			{{- if $f.FieldType.IsTime }}
				{{- $reqf = $f.Name }}
			{{- end }}
			{{ $f.Name | ToCamel }}: {{$reqf}},
		{{- end }}
	}
}

func update{{.Name}}Req2Biz(req *v1.Update{{.Name}}Request) *biz.{{.Name}} {
	{{- range $i, $f := .CreateFields }}
		{{- $reqf := printf "req.%s" ($f.Name | ToCamel) }}
		{{- if $f.FieldType.IsTime }}
			{{ $f.Name }}, _ := time.Parse(time.DateTime, {{ $reqf }})
		{{- end }}
	{{- end }}
	return &biz.{{.Name}}{
		{{- $reqf := printf "req.%s" (.PrimaryField.Name | ToCamel) }}
		{{ .PrimaryField.Name | ToCamel }}: {{$reqf}},
		{{- range $i, $f := .UpdateFields }}
			{{- $reqf := printf "req.%s" ($f.Name | ToCamel) }}
			{{- if $f.FieldType.IsTime }}
				{{- $reqf = $f.Name }}
			{{- end }}
			{{ $f.Name | ToCamel }}: {{$reqf}},
		{{- end }}
	}
}

func {{.Name | ToLowCamel}}Biz2Proto(item *biz.{{.Name}}) *v1.{{.Name}} {
	return &v1.{{.Name}}{
		{{- range $i, $f := .Fields }}
			{{- $reqf := printf "item.%s" ($f.Name | ToCamel) }}
			{{- if $f.FieldType.IsTime }}
				{{- $reqf = printf $f.FieldType.Biz2Proto $reqf }}
			{{- end }}
			{{ $f.Name | ToCamel }}: {{$reqf}},
		{{- end }}
	}
}

func bulk{{.Name}}Biz2Proto(list []*biz.{{.Name}}) []*v1.{{.Name}} {
	var target []*v1.{{.Name}}
	for _, item := range list {
		target = append(target, {{.Name | ToLowCamel}}Biz2Proto(item))
	}
	return target
}

func param{{.Name}}Proto2Biz(req *v1.{{.Name}}Param) *biz.{{.Name}}Param {
	if req == nil {
		return &biz.{{.Name}}Param{}
	}
	{{- range $i, $f := .Fields.ParamFields }}
		{{- if and $f.FieldType.IsTime (not $f.Type.IsIn) }}
			{{- $reqf := printf "req.%s%s" ($f.SourceName | ToCamel) $f.Type.StringProto }}
			var {{ $f.Name | ToLowCamel }} *time.Time
			if {{ $reqf }} != nil {
				item, err := time.Parse(time.DateTime, *{{$reqf}})
				if err == nil {
					{{ $f.Name | ToLowCamel }} = &item
				} else {
					// TODO return error
				}
			}
		{{- end }}
	{{- end }}

	{{- range $i, $f := .Fields.ParamFields }}
		{{- $reqf := printf "req.%s%s" ($f.SourceName | ToCamel) $f.Type.StringProto }}
		{{- if and $f.FieldType.IsTime $f.Type.IsIn }}
			{{ $f.Name }} := make([]time.Time, 0, len({{$reqf}}))
			for _, timestamp := range {{$reqf}} {
				item, _ := time.Parse(time.DateTime, timestamp)
				// TODO return error
				{{ $f.Name }} = append({{ $f.Name }}, item)
			}
		{{- end }}
	{{- end }}

	return &biz.{{.Name}}Param{
		{{- range $i, $f := .Fields.ParamFields }}
			{{- $reqf := printf "req.%s%s" ($f.SourceName | ToCamel) $f.Type.StringProto }}
			{{- if $f.FieldType.IsTime }}
				{{ $f.Name | ToCamel }}: {{$f.Name | ToLowCamel }},
			{{- else }}
				{{ $f.Name | ToCamel }}: {{$reqf}},
			{{- end }}
		{{- end }}
	}
}
