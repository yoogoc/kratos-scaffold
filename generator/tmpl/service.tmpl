{{- /*gotype: github.com/yoogoc/kratos-scaffold/generator.Service*/ -}}
package service

import (
	"context"
	"github.com/go-kratos/kratos/v2/log"
	v1 "{{.ApiPath}}"
	"{{.CurrentPkgPath}}/biz"
	{{- range $i, $s := .MaybeGoPackages }}
	"{{ $s }}"
	{{- end }}
)

type {{.Name}}Service struct {
	v1.Unimplemented{{.Name}}ServiceServer
	uc  *biz.{{.Name}}Usecase
	log *log.Helper
}

func New{{.Name}}Service(uc *biz.{{.Name}}Usecase, logger log.Logger) *{{.Name}}Service {
	return &{{.Name}}Service{
		log: log.NewHelper(log.With(logger, "module", "service/{{.Name | ToSnake}}")),
		uc:  uc,
	}
}

func (s *{{.Name}}Service) Create(ctx context.Context, req *v1.Create{{.Name}}Request) (*v1.Create{{.Name}}Reply, error) {
	item, err := s.uc.Create{{.Name}}(ctx, create{{.Name}}Req2Biz(req))
	if err != nil {
		return nil, err
	}
	return &v1.Create{{.Name}}Reply{
		Datum: {{.Name | ToLowCamel }}Biz2Proto(item),
	}, nil
}

func (s *{{.Name}}Service) Update(ctx context.Context, req *v1.Update{{.Name}}Request) (*v1.Update{{.Name}}Reply, error) {
	item, err := s.uc.Update{{.Name}}(ctx, update{{.Name}}Req2Biz(req))
	if err != nil {
		return nil, err
	}
	return &v1.Update{{.Name}}Reply{
		Datum: {{.Name | ToLowCamel }}Biz2Proto(item),
	}, nil
}
{{- if .GenHttp }}
func (s *{{.Name}}Service) Destroy(ctx context.Context, req *v1.Destroy{{.Name}}Request) (*v1.Destroy{{.Name}}Reply, error) {
	_, err := s.uc.Destroy{{.Name}}By(ctx, &biz.{{.Name}}Param{
		{{.PrimaryKey | ToCamel }}Eq: &req.{{.PrimaryKey | ToCamel}},
	})
	if err != nil {
		return nil, err
	}
	return &v1.Destroy{{.Name}}Reply{}, nil
}

func (s *{{.Name}}Service) Get(ctx context.Context, req *v1.Get{{.Name}}Request) (*v1.Get{{.Name}}Reply, error) {
	item, err := s.uc.Find{{.Name}}By(ctx, &biz.{{.Name}}Param{
		{{.PrimaryKey | ToCamel }}Eq: &req.{{.PrimaryKey | ToCamel}},
	})
	if err != nil {
		return nil, err
	}
	return &v1.Get{{.Name}}Reply{
		Datum: {{.Name | ToLowCamel }}Biz2Proto(item),
	}, nil
}

{{- else }}
func (s *{{.Name}}Service) DestroyBy(ctx context.Context, req *v1.Destroy{{.Name}}ByRequest) (*v1.Destroy{{.Name}}ByReply, error) {
	count, err := s.uc.Destroy{{.Name}}By(ctx, param{{.Name}}Proto2Biz(req.Param))
	if err != nil {
		return nil, err
	}
	return &v1.Destroy{{.Name}}ByReply{
		Count: int32(count),
	}, nil
}

func (s *{{.Name}}Service) FindBy(ctx context.Context, req *v1.Find{{.Name}}ByRequest) (*v1.Find{{.Name}}ByReply, error) {
	item, err := s.uc.Find{{.Name}}By(ctx, param{{.Name}}Proto2Biz(req.Param))
	if err != nil {
		return nil, err
	}
	return &v1.Find{{.Name}}ByReply{
		Datum: {{.Name | ToLowCamel }}Biz2Proto(item),
	}, nil
}
{{- end }}

func (s *{{.Name}}Service) List(ctx context.Context, req *v1.List{{.Name}}Request) (*v1.List{{.Name}}Reply, error) {
	list, count, err := s.uc.List{{.Name}}(ctx, param{{.Name}}Proto2Biz(req.Param), int(req.Page), int(req.PageSize))
	if err != nil {
		return nil, err
	}
	return &v1.List{{.Name}}Reply{
		List: bulk{{.Name}}Biz2Proto(list),
		Count: uint32(count),
	}, nil
}
