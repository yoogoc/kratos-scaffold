{{- /*gotype: github.com/yoogoc/kratos-scaffold/generator.Data*/ -}}
{{$modelName := .Name |ToLowerCamel}}
package data

import (
	"context"
	"{{.CurrentPkgPath}}/biz"
	"github.com/go-kratos/kratos/v2/log"
	{{$modelName}}V1 "{{ .ProtoPkgPath }}"
)

var _ biz.{{.Name | ToCamel}}Repo = (*{{$modelName}}Repo)(nil)

type {{$modelName}}Repo struct {
	{{$modelName}} {{$modelName}}V1.{{.Name | ToCamel}}ServiceClient
	log   *log.Helper
}

func New{{.Name | ToCamel}}Repo(logger log.Logger, {{$modelName}} {{$modelName}}V1.{{.Name | ToCamel}}ServiceClient) biz.{{.Name | ToCamel}}Repo {
	return &{{$modelName}}Repo{
		{{$modelName}}: {{$modelName}},
		log:  log.NewHelper(log.With(logger, "module", "data/{{$modelName}}")),
	}
}

func (r {{$modelName}}Repo) Create(ctx context.Context, {{$modelName}} *biz.{{.Name | ToCamel}}) (*biz.{{.Name | ToCamel}}, error) {
	reply, err := r.{{$modelName}}.Create(ctx, &{{$modelName}}V1.Create{{.Name | ToCamel}}Request{
		{{- range $i, $f := .CreateFields }}
			{{- if $f.FieldType.IsTime }}
				{{ $f.Name | ToCamel }}: {{$modelName}}.{{ $f.Name | ToCamel }}.Format(time.DateTime),
			{{- else }}
				{{ $f.Name | ToCamel }}: {{$modelName}}.{{ $f.Name | ToCamel }},
			{{- end }}
		{{- end }}
	})
	if err != nil {
		return nil, err
	}
	return {{$modelName}}Proto2Biz(reply.{{.Name | ToCamel}}), nil

}

func (r {{$modelName}}Repo) Update(ctx context.Context, {{$modelName}} *biz.{{.Name | ToCamel}}) (*biz.{{.Name | ToCamel}}, error) {
	reply, err := r.{{$modelName}}.Update(ctx, &{{$modelName}}V1.Update{{.Name | ToCamel}}Request{
		{{- range $i, $f := .UpdateProtoFields }}
			{{ $f.Name | ToCamel }}: {{$modelName}}.{{ $f.Name | ToCamel }},
		{{- end }}
	})
	if err != nil {
		return nil, err
	}
	return {{$modelName}}Proto2Biz(reply.{{.Name | ToCamel}}), nil
}

func (r {{$modelName}}Repo) DestroyBy(ctx context.Context, param *biz.{{.Name | ToCamel}}Param) (int, error) {
	_, err := r.{{$modelName}}.DestroyBy(ctx, &{{$modelName}}V1.Destroy{{.Name | ToCamel}}ByRequest{
		Param: {{.Name | ToLowerCamel}}ParamBiz2Proto(param),
	})
	return 0, err
}

func (r {{$modelName}}Repo) List(ctx context.Context, param *biz.{{.Name | ToCamel}}Param, page, size int) ([]*biz.{{.Name | ToCamel}}, int, error) {
	reply, err := r.{{$modelName}}.List(ctx, &{{$modelName}}V1.List{{.Name | ToCamel}}Request{
		Param: {{.Name | ToLowerCamel}}ParamBiz2Proto(param),
		Page:     uint32(page),
		PageSize: uint32(size),
	})
	if err != nil {
		return nil, 0, err
	}
	return bulk{{.Name | ToCamel}}Proto2Biz(reply.{{.Name | ToCamelPlural}}), int(reply.Count), nil
}

func (r {{$modelName}}Repo) FindBy(ctx context.Context, param *biz.{{.Name | ToCamel}}Param) (*biz.{{.Name | ToCamel}}, error) {
	reply, err := r.{{$modelName}}.FindBy(ctx, &{{$modelName}}V1.Find{{.Name | ToCamel}}ByRequest{
		Param: {{.Name | ToLowerCamel}}ParamBiz2Proto(param),
	})
	if err != nil {
		return nil, err
	}
	return {{$modelName}}Proto2Biz(reply.{{ .Name | ToCamel }}), nil
}
